/*      */ package com.ibm.disthub2.impl.client;
/*      */ 
/*      */ import com.ibm.disthub2.client.Checkpoint;
/*      */ import com.ibm.disthub2.client.Connector;
/*      */ import com.ibm.disthub2.client.Event;
/*      */ import com.ibm.disthub2.client.Listener;
/*      */ import com.ibm.disthub2.client.Message;
/*      */ import com.ibm.disthub2.client.MessageBodyHandle;
/*      */ import com.ibm.disthub2.client.SubscriptionListener;
/*      */ import com.ibm.disthub2.client.Topic;
/*      */ import com.ibm.disthub2.impl.formats.ByteSequence;
/*      */ import com.ibm.disthub2.impl.formats.Envelop;
/*      */ import com.ibm.disthub2.impl.formats.Framing;
/*      */ import com.ibm.disthub2.impl.formats.MessageDataHandle;
/*      */ import com.ibm.disthub2.impl.formats.MessageEncrypter;
/*      */ import com.ibm.disthub2.impl.formats.MessageHandle;
/*      */ import com.ibm.disthub2.impl.formats.PropagationContext;
/*      */ import com.ibm.disthub2.impl.formats.ReleaseTable;
/*      */ import com.ibm.disthub2.impl.formats.Schema;
/*      */ import com.ibm.disthub2.impl.formats.SchemaRegistry;
/*      */ import com.ibm.disthub2.impl.net.SocketFamilyManager;
/*      */ import com.ibm.disthub2.impl.util.Assert;
/*      */ import com.ibm.disthub2.impl.util.DebugState;
/*      */ import com.ibm.disthub2.impl.util.DoPrivileged;
/*      */ import com.ibm.disthub2.impl.util.ExceptionWrapper;
/*      */ import com.ibm.disthub2.impl.util.FeatureSet;
/*      */ import com.ibm.disthub2.impl.util.SegmentReader;
/*      */ import com.ibm.disthub2.impl.util.SimplestSegmentReader;
/*      */ import com.ibm.disthub2.impl.util.StampPair;
/*      */ import com.ibm.disthub2.impl.util.VectorClock;
/*      */ import com.ibm.disthub2.spi.ClientExceptionConstants;
/*      */ import com.ibm.disthub2.spi.ClientTranslate;
/*      */ import com.ibm.disthub2.spi.ExceptionBuilder;
/*      */ import com.ibm.disthub2.spi.LogConstants;
/*      */ import com.ibm.disthub2.spi.LogRecorder;
/*      */ import com.ibm.disthub2.spi.Principal;
/*      */ import java.io.EOFException;
/*      */ import java.io.IOException;
/*      */ import java.io.OutputStream;
/*      */ import java.lang.reflect.Method;
/*      */ import java.net.Socket;
/*      */ import java.net.SocketException;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class ConnectorImpl
/*      */   extends PropagationContext
/*      */   implements Connector, Runnable, LogConstants, ClientExceptionConstants, Envelop.Constants
/*      */ {
/*      */   private static final String copyright = "Licensed Material - Property of IBM \n5648-C63 (c) Copyright IBM Corp. 2000, 2001, 2003 - All Rights Reserved. \nUS Government Users Restricted Rights - Use, duplication or disclosure \nrestricted by GSA ADP Schedule Contract with IBM Corp.";
/*  145 */   private static final DebugObject debug = new DebugObject("ConnectorImpl");
/*      */ 
/*      */   
/*      */   private static boolean initialized = false;
/*      */ 
/*      */   
/*      */   public static final int ERROR_CONNECTION_DROPPED = -5;
/*      */ 
/*      */   
/*      */   public static final int ERROR_SUBSCRIBE_NOT_AUTHORIZED = -7;
/*      */ 
/*      */   
/*      */   public static final int ERROR_INVALID_SUBJECT_SYNTAX = -15;
/*      */ 
/*      */   
/*      */   public static final int ERROR_INVALID_QUERY_SYNTAX = -16;
/*      */ 
/*      */   
/*      */   public static final int ERROR_INVALID_SUBSCRIPTION_MODE = -17;
/*      */ 
/*      */   
/*      */   public static final int ERROR_SECURITY_GENERAL = -18;
/*      */ 
/*      */   
/*      */   public static final int ERROR_DURSVC_TMP_UNAVAILABLE = -19;
/*      */ 
/*      */   
/*      */   public static final int ERROR_INVALID_RECONNID = -20;
/*      */ 
/*      */   
/*      */   public static final int ERROR_PFS_PROBLEM = -21;
/*      */ 
/*      */   
/*      */   public static final int ERROR_INVALID_CPID = -22;
/*      */   
/*      */   public static final int ERROR_DUPLICATE_CPID = -23;
/*      */   
/*      */   public static final int ERROR_ILLEGAL_STATE = -24;
/*      */   
/*      */   public static final int ERROR_DS_NOT_EXIST = -25;
/*      */   
/*      */   public static final int ERROR_NO_MATCHSPACE = -26;
/*      */   
/*      */   public static final int ERROR_NO_DURCON = -27;
/*      */   
/*      */   public static final int ERROR_BROKER_ERROR = -28;
/*      */   
/*      */   public static final int ERROR_NONJMS_TOPIC = -29;
/*      */   
/*      */   public static final int ERROR_CONNMON_TIMEOUT = -30;
/*      */   
/*      */   public static final int ERROR_MIN_MAXEXCEEDED = -31;
/*      */   
/*      */   protected Socket socket;
/*      */   
/*      */   private SegmentReader rdr;
/*      */   
/*      */   private OutputStream outStream;
/*      */   
/*      */   protected Listener listener;
/*      */   
/*      */   protected SubscriptionListener sublistener;
/*      */   
/*      */   protected Dispatcher dispatcher;
/*      */   
/*      */   protected Exception lastException;
/*      */   
/*      */   protected Security security;
/*      */   
/*      */   protected String tempTopicPrefix;
/*      */   
/*      */   protected MessageHandle pingReply;
/*      */   
/*      */   protected MessageHandle notUnderstood;
/*      */   
/*      */   protected long messageId;
/*      */   
/*  222 */   private static byte[] empty = new byte[0];
/*      */ 
/*      */ 
/*      */   
/*      */   protected static final int DEFAULT_PRIORITY = 4;
/*      */ 
/*      */ 
/*      */   
/*      */   static final int CONTROL_PRIORITY = 40;
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean pre1_2;
/*      */ 
/*      */   
/*  237 */   private short interpId = 1;
/*      */ 
/*      */ 
/*      */   
/*      */   protected int[] outReqs;
/*      */ 
/*      */ 
/*      */   
/*      */   protected static final int NUM_OUTREQS = 8;
/*      */ 
/*      */ 
/*      */   
/*      */   protected Object[] responseHolders;
/*      */ 
/*      */   
/*  252 */   private static final Class[] consArgs = new Class[] { String.class, String.class, BaseConfig.class };
/*      */ 
/*      */   
/*      */   protected Thread lThread;
/*      */ 
/*      */   
/*      */   protected Thread connMon;
/*      */ 
/*      */   
/*  261 */   volatile long pingClock = System.currentTimeMillis();
/*      */   
/*      */   volatile long lastMRTime;
/*  264 */   int pingCnt = 0; protected boolean active = true; public BaseConfig baseConfig; protected Hashtable topicCache; public static final int LOGGING_SUCCESS = 100; public static final int LOGGING_FAILURE = 101; public static final int LOGGING_NOTENABLED = 102; protected String clientId; protected String publisherId;
/*      */   protected Hashtable allDurableSubs;
/*      */   public Hashtable allSubs;
/*      */   protected boolean durable_connection;
/*      */   protected boolean have_matchspace;
/*      */   protected Object hear;
/*      */   public MinimalMatchMaker match;
/*      */   protected FeatureSet features;
/*      */   private String happy;
/*      */   private long rwr;
/*      */   private long rwfm;
/*      */   private int maxWindowSize;
/*      */   
/*      */   protected Class configClass() {
/*  278 */     return BaseConfig.class;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   protected ConnectorImpl()
/*      */   {
/*  285 */     this.topicCache = new Hashtable<>();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  294 */     this.clientId = null;
/*      */     
/*  296 */     this.publisherId = null;
/*  297 */     this.allDurableSubs = new Hashtable<>();
/*  298 */     this.allSubs = new Hashtable<>();
/*  299 */     this.durable_connection = false;
/*  300 */     this.have_matchspace = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  310 */     this.features = new FeatureSet();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2318 */     this.happy = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2965 */     this.rwr = 0L; this.rwfm = 0L; } public ConnectorImpl(String socketTypeName, String host, int port, String user, String passwd, Listener listener, boolean startListener, BaseConfig config, boolean durable_connection) throws IOException { this.topicCache = new Hashtable<>(); this.clientId = null; this.publisherId = null; this.allDurableSubs = new Hashtable<>(); this.allSubs = new Hashtable<>(); this.durable_connection = false; this.have_matchspace = false; this.features = new FeatureSet(); this.happy = null; this.rwr = 0L; this.rwfm = 0L; this.durable_connection = durable_connection; this.have_matchspace = false; this.hear = listener; connect(socketTypeName, host, port, user, passwd, null, startListener, config); }
/*      */   public ConnectorImpl(String socketTypeName, String host, int port, String user, String passwd, Listener listener, boolean startListener, BaseConfig config) throws IOException { this(socketTypeName, host, port, user, passwd, listener, startListener, config, false); }
/*      */   public ConnectorImpl(String socketTypeName, String host, int port, String user, String passwd, SubscriptionListener slistener, boolean startListener, BaseConfig config) throws IOException { this(socketTypeName, host, port, user, passwd, (Listener)slistener, startListener, config, true); }
/*      */   public ConnectorImpl(String socketTypeName, String host, int port, Principal creds, Listener listener, boolean startListener, BaseConfig config) throws IOException { this(socketTypeName, host, port, null, null, listener, startListener, config, true); }
/*      */   private void connect(String socketTypeName, String host, int port, String user, String passwd, Principal creds, boolean startListener, BaseConfig config) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "ConnectorImpl", socketTypeName, host, Integer.valueOf(port), creds, user, this.listener, Boolean.valueOf(startListener));  synchronized (this) { if (config != null) { this.baseConfig = config; } else { this.baseConfig = BaseConfig.getBaseConfig(); }  BaseConfig.noMoreChanges = true; getSecurity(user, passwd); if (creds == null) creds = this.security.createPrincipal(user, passwd);  if (this.durable_connection) { this.sublistener = (SubscriptionListener)this.hear; allocateMatchSupport(); } else { this.listener = (Listener)this.hear; }  this.socket = SocketFamilyManager.createSocket(socketTypeName, host, port, this.baseConfig); if (this.baseConfig.ENABLE_TCP_NODELAY) try { this.socket.setTcpNoDelay(true); } catch (SocketException socketException) {}  this.releaseVersion = this.security.authorize(this.socket, creds); this.pre1_2 = (this.releaseVersion < 65538); for (int i = 0; i < ReleaseTable.releases.length; i++) { if ((ReleaseTable.releases[i]).release == this.releaseVersion) { this.interpId = (ReleaseTable.releases[i]).interp; break; }  }  this.outStream = this.socket.getOutputStream(); this.rdr = (SegmentReader)new SimplestSegmentReader(this.socket.getInputStream(), this.baseConfig.EXPECTED_MESSAGE_SIZE); this.rdr.setParms((short)-13647, this.baseConfig.MAX_MESSAGE_SIZE + this.baseConfig.MESSAGE_SIZE_EXTRA_ALLOWANCE); this.rdr.prepGet(null); this.outReqs = new int[8]; this.responseHolders = new Object[8]; this.pingReply = newMessage(3, "", 40); this.notUnderstood = newMessage(9, "", 40); this.notUnderstood.setInt(46, 65538); while (this.tempTopicPrefix == null) handleMessage(receive());  }  if (startListener) { if (this.durable_connection) { this.dispatcher = new Dispatcher(this.sublistener, this); } else { this.dispatcher = new Dispatcher(this.listener, this); }  DoPrivileged.createAndStartThread(this.dispatcher, true); this.lThread = DoPrivileged.createAndStartThread(this, false); }  long pingInterval = this.baseConfig.CLIENT_PING_INTERVAL; if (pingInterval > 0L) { this.pingClock = System.currentTimeMillis(); this.connMon = DoPrivileged.createAndStartThread(new ConnectionMonitor(this), true); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "ConnectorImpl");  }
/*      */   private Security getSecurity(String user, String passwd) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "getSecurity");  if (this.security == null) try { if (debug.debugIt(16)) debug.debug(-153415734321212L, "getSecurity", "Loading impl: " + BaseConfig.CLIENT_SECURITY_IMPL);  this.security = Class.forName(BaseConfig.CLIENT_SECURITY_IMPL).getConstructor(new Class[] { BaseConfig.class }).newInstance(new Object[] { this.baseConfig }); } catch (Exception e) { throw new IOException(ExceptionBuilder.buildReasonString(111981380, new Object[] { new ExceptionWrapper(e) })); }   if (debug.debugIt(64)) debug.debug(-142394261359015L, "getSecurity", this.security);  return this.security; }
/*      */   public synchronized void allocateMatchSupport() throws IOException { if (this.have_matchspace) return;  try { this.match = (MinimalMatchMaker)Class.forName("com.ibm.disthub2.impl.client.MinimalMatchMakerImpl").newInstance(); this.have_matchspace = true; } catch (Exception e) { throw new IOException(ExceptionBuilder.buildReasonString(713132917, null)); }  }
/*      */   protected synchronized int getTrackingNumber() { if (debug.debugIt(32)) debug.debug(-165922073994779L, "getTrackingNumber");  int track; for (track = 1; track < this.outReqs.length && this.outReqs[track] != 0; track++); if (track == this.outReqs.length) { int[] newReqs = new int[this.outReqs.length * 2]; System.arraycopy(this.outReqs, 0, newReqs, 0, this.outReqs.length); this.outReqs = newReqs; Object[] newResponseHolders = new Object[this.responseHolders.length * 2]; System.arraycopy(this.responseHolders, 0, newResponseHolders, 0, this.responseHolders.length); this.responseHolders = newResponseHolders; }  this.outReqs[track] = -1; int result = track; if (debug.debugIt(64)) debug.debug(-142394261359015L, "getTrackingNumber", Integer.valueOf(result));  return result; }
/*      */   protected synchronized int waitFor(int track) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "waitFor", Integer.valueOf(track));  while (this.outReqs[track] == -1 && this.lastException == null) { try { wait(); } catch (InterruptedException interruptedException) {} }  checkException(); int ans = this.outReqs[track]; this.outReqs[track] = 0; if (debug.debugIt(64)) debug.debug(-142394261359015L, "waitFor", Integer.valueOf(ans));  return ans; }
/*      */   protected static MessageHandle newMessage(int type, String topic, int priority) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "newMessage", Integer.valueOf(type), topic, Integer.valueOf(priority));  MessageHandle ans = SchemaRegistry.getMessageHandle(); ans.setByteArray(0, empty); ans.setBoolean(1, false); ans.setChoice(145, 0); ans.setByte(2, (byte)priority); ans.setBoolean(3, false); ans.setString(4, topic); ans.setLong(5, 0L); ans.setLong(6, 0L); ans.setBoolean(7, false); ans.setBoolean(8, false); ans.setBoolean(9, false); ans.setBoolean(10, false); ans.setChoice(147, 1); ans.setChoice(149, type); if (debug.debugIt(64)) debug.debug(-142394261359015L, "newMessage", ans);  return ans; }
/*      */   static MessageHandle newNormalMessage(String topic, int type, String reply, int track) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "normalMessage", topic, Integer.valueOf(type), reply, Integer.valueOf(track));  MessageHandle ans = newMessage(1, topic, 4); if (reply == null) { ans.setChoice(150, 0); } else { ans.setString(12, reply); }  if (track == 0) { ans.setChoice(151, 0); } else { ans.setInt(13, track); }  ans.setChoice(152, type); ans.setLong(11, 0L); if (debug.debugIt(64)) debug.debug(-142394261359015L, "normalMessage", ans);  return ans; }
/*      */   protected static MessageHandle newControlMessage(int type, int track) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "newControlMessage", Integer.valueOf(type), Integer.valueOf(track));  MessageHandle ans = newMessage(10, "", 4); if (track == 0) { ans.setChoice(161, 0); } else { ans.setInt(47, track); }  ans.setChoice(162, type); if (debug.debugIt(64)) debug.debug(-142394261359015L, "newControlMessage", ans);  return ans; }
/* 2977 */   public Exception getException() { if (debug.debugIt(32)) debug.debug(-165922073994779L, "getException");  if (debug.debugIt(64)) debug.debug(-142394261359015L, "getException", this.lastException);  return this.lastException; } protected void checkException() throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "checkException");  if (this.lastException != null) { this.rdr = null; if (this.dispatcher != null) this.dispatcher.shutdown();  shutdown(); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "checkException");  } private void shutdown() throws IOException { try { try { Method m = this.socket.getClass().getMethod("shutdownInput", (Class[])null); if (m != null) m.invoke(this.socket, (Object[])null);  m = this.socket.getClass().getMethod("shutdownOutput", (Class[])null); if (m != null) m.invoke(this.socket, (Object[])null);  } catch (NoSuchMethodException noSuchMethodException) {  } catch (Throwable throwable) {} this.socket.close(); } catch (IOException iOException) {} if (this.lastException == null) return;  if (this.lastException instanceof IOException) throw (IOException)this.lastException;  if (this.lastException instanceof RuntimeException) throw (RuntimeException)this.lastException;  throw new IOException(ExceptionBuilder.buildReasonString(322992620, new Object[] { this.lastException })); } public Topic createTopic(String name) throws IOException { return createTopicInternal(name, false); } synchronized TopicImpl createTopicInternal(String name, boolean allowTemp) throws IOException { TopicImpl result; if (debug.debugIt(32)) debug.debug(-165922073994779L, "createTopicInternal", name, Boolean.valueOf(allowTemp));  if (allowTemp && name.startsWith("\001TEMP/")) { result = new TopicImpl(name, true); } else { result = (TopicImpl)this.topicCache.get(name); if (result == null) { result = new TopicImpl(name); this.topicCache.put(name, result); }  if (!result.propertiesSet) requestProperties(name);  }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "createTopicInternal", result);  return result; } protected synchronized void requestProperties(String name) throws IOException { if (this.pre1_2) { TopicImpl toRegister = (TopicImpl)this.topicCache.get(name); toRegister.setDefaultProperties(); return; }  int track = getTrackingNumber(); MessageHandle query = newControlMessage(14, track); query.setString(65, name); MessageBodyHandle[] props = new MessageBodyHandle[TopicImpl.propertyKeys.length]; for (int i = 0; i < TopicImpl.propertyKeys.length; i++) { props[i] = query.newTableRow(66); props[i].setString(0, TopicImpl.propertyKeys[i]); }  query.setTable(66, props); send(query); waitFor(track); } public Topic createTemporaryTopic(String name) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "createTemporaryTopic");  TopicImpl result = new TopicImpl(createTemporaryTopicString(name), true); if (debug.debugIt(64)) debug.debug(-142394261359015L, "createTemporaryTopic", result);  return result; } public synchronized void initTopic(TopicImpl topic) throws IOException { if (topic.isTemporary()) return;  TopicImpl toCopy = (TopicImpl)this.topicCache.get(topic.fullName); if (toCopy == null) { this.topicCache.put(topic.fullName, topic); toCopy = topic; }  if (!toCopy.propertiesSet) requestProperties(toCopy.fullName);  if (toCopy != topic) topic.setProperties(toCopy);  } protected String createTemporaryTopicString(String name) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "createTemporaryTopicString");  String result = this.tempTopicPrefix + "/" + name; if (debug.debugIt(64)) debug.debug(-142394261359015L, "createTemporaryTopicString", result);  return result; } public void startDelivery() throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "startDelivery");  int track = getTrackingNumber(); send(newControlMessage(5, track)); waitFor(track); if (debug.debugIt(64)) debug.debug(-142394261359015L, "startDelivery");  } public void stopDelivery() throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "stopDelivery");  int track = getTrackingNumber(); send(newControlMessage(7, track)); waitFor(track); if (debug.debugIt(64)) debug.debug(-142394261359015L, "stopDelivery");  } public int subscribe(Topic topic, String selector) throws IOException { if (this.pre1_2) return subscribe(topic, selector, 1);  return subscribe(topic, selector, 2); } public int subscribe(Topic topic, String selector, int subMode) throws IOException { if (this.pre1_2 && subMode != 1) throw new IOException(ExceptionBuilder.buildReasonString(-535566704, new Object[] { topic }));  SubscriptionInfo subInfo = new SubscriptionInfo(); subInfo.topic = topic.toString(); subInfo.rawtopic = topic; subInfo.selector = selector; subInfo.subMode = subMode; subInfo.reconnId = null; subInfo.isJMSdurable = false; return subscribeInternal(subInfo, false); } public int subscribeInternal(SubscriptionInfo subInfo, boolean isReactivate) throws IOException { Topic topic = subInfo.rawtopic; String selector = subInfo.selector; int subMode = subInfo.subMode; if (subMode == 4 && !this.have_matchspace) throw new MinimalIOException(-26, ExceptionBuilder.buildReasonString(713132917, null));  if (this.have_matchspace) try { this.match.addMatchTarget(topic, selector, subInfo); } catch (IOException e) { this.match.removeSubscription(subInfo); throw e; }   subInfo.nonDurable = (subMode != 4); subInfo.active = false; int id = -1; try { id = subscribeInternalReqReply(subInfo, isReactivate); if (this.have_matchspace && id <= 0) this.match.removeSubscription(subInfo);  } catch (IOException e1) { if (this.have_matchspace) this.match.removeSubscription(subInfo);  throw e1; }  return id; } protected int subscribeInternalReqReply(SubscriptionInfo subInfo, boolean isReactivate) throws IOException { int id; String topic = subInfo.rawtopic.toStringInternal(); String selector = subInfo.selector; int subMode = subInfo.subMode; synchronized (this) { MessageHandle submsg; if (topic.startsWith("\001TEMP/") && !topic.startsWith(this.tempTopicPrefix)) throw new IllegalArgumentException(ExceptionBuilder.buildReasonString(32172136, new Object[] { topic }));  selector = (selector == null) ? "" : selector; int track = getTrackingNumber(); this.responseHolders[track] = subInfo; if (isReactivate) { submsg = newControlMessage(22, track); submsg.setString(75, subInfo.reconnId); submsg.setString(76, topic); submsg.setString(77, subInfo.selector); MessageBodyHandle[] rAtimeTab = new MessageBodyHandle[subInfo.Delivered.size()]; Enumeration<StampPair> cStamps = subInfo.Delivered.allElements(); int i = 0; while (cStamps.hasMoreElements()) { StampPair sp = cStamps.nextElement(); rAtimeTab[i] = submsg.newTableRow(78); rAtimeTab[i].setLong(0, sp.pid); rAtimeTab[i].setLong(1, sp.stamp); i++; }  submsg.setTable(78, rAtimeTab); } else { submsg = newControlMessage(1, track); submsg.setString(48, topic); submsg.setString(49, selector.trim()); if (subMode != 3 && subMode != 2 && subMode != 1 && subMode != 4) throw new IllegalArgumentException(ExceptionBuilder.buildReasonString(2004894880, new Object[] { Integer.valueOf(subMode) }));  if (enableMulticast() && subInfo.multicastEnabled) { submsg.setInt(50, 2); submsg.setChoice(164, 1); submsg.setBoolean(52, true); submsg.setBoolean(53, subInfo.multicastReliable); } else { submsg.setChoice(164, 0); submsg.setInt(50, subMode); }  if (subInfo.appName == null) { submsg.setString(51, null); } else { submsg.setString(51, subInfo.appName); }  }  send(submsg); id = waitFor(track); switch (id) { case -5: throw new MinimalIOException(-5, ExceptionBuilder.buildReasonString(1024325086, null));case -7: throw new MinimalIOException(-7, ExceptionBuilder.buildReasonString(-1155560158, new Object[] { topic }));case -15: throw new MinimalIOException(-15, ExceptionBuilder.buildReasonString(-2048318799, new Object[] { topic, selector, Integer.valueOf(-15) }));case -16: throw new MinimalIOException(-16, ExceptionBuilder.buildReasonString(-2048318799, new Object[] { topic, selector, Integer.valueOf(-16) }));case -18: throw new MinimalIOException(-18, ExceptionBuilder.buildReasonString(-821104835, new Object[] { topic }));case -17: throw new MinimalIOException(-17, ExceptionBuilder.buildReasonString(731058151, new Object[] { topic, Integer.valueOf(subMode) }));case -19: throw new MinimalIOException(-19, ExceptionBuilder.buildReasonString(-1329786502, new Object[] { topic, selector, Integer.valueOf(subMode) }));case -20: throw new MinimalIOException(-20, ExceptionBuilder.buildReasonString(-468882815, null));case -21: throw new MinimalIOException(-21, ExceptionBuilder.buildReasonString(-827599405, new Object[] { topic, selector, Integer.valueOf(subMode) }));case -22: throw new MinimalIOException(-22, ExceptionBuilder.buildReasonString(-292024369, null));case -24: throw new MinimalIOException(-24, ExceptionBuilder.buildReasonString(-1329786502, new Object[] { topic, selector, Integer.valueOf(subMode) }));case -25: throw new MinimalIOException(-25, ExceptionBuilder.buildReasonString(-1725415636, new Object[] { topic, selector, Integer.valueOf(subMode) })); }  Assert.condition((id > 0)); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "subscribe", Integer.valueOf(id));  return id; } public void unsubscribe(int id) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "unsubscribe", Integer.valueOf(id));  int track = getTrackingNumber(); MessageHandle submsg = newControlMessage(3, track); submsg.setInt(60, id); submsg.setChoice(170, 0); send(submsg); waitFor(track); SubscriptionInfo subInfo = (SubscriptionInfo)this.allSubs.get(Integer.valueOf(id)); if (subInfo != null) removeSubscription(subInfo);  if (debug.debugIt(64)) debug.debug(-142394261359015L, "unsubscribe");  } public synchronized void close(boolean abrupt) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "close", Boolean.valueOf(abrupt));  if (this.rdr == null) return;  try { if (!abrupt) { int track = getTrackingNumber(); send(newControlMessage(9, track)); waitFor(track); }  this.rdr = null; if (this.dispatcher != null) this.dispatcher.shutdown();  shutdown(); } catch (IOException e) { this.lastException = e; }  this.active = false; notifyAll(); if (debug.debugIt(64)) debug.debug(-142394261359015L, "close");  } public void run() { if (debug.debugIt(32)) { debug.debug(-165922073994779L, "run"); } else { try { while (this.rdr != null) { byte[] data = receive(); this.lastMRTime = this.pingClock; this.pingCnt = 0; handleMessage(data); }  } catch (Exception e) { setException(e); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "run");  return; }  while (this.rdr != null) { byte[] arrayOfByte = receive(); this.lastMRTime = this.pingClock; this.pingCnt = 0; handleMessage(arrayOfByte); }  } protected void setException(Exception e) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "setException", e);  boolean dropConn = false; synchronized (this) { if (this.lastException == null) { this.lastException = e; dropConn = true; notifyAll(); }  }  if (dropConn) connectionDropped();  if (debug.debugIt(64)) debug.debug(-142394261359015L, "setException");  } protected void connectionDropped() { if (debug.debugIt(32)) debug.debug(-165922073994779L, "connectionDropped");  if (this.durable_connection) { this.dispatcher.sublistener.exception(new MinimalIOException(-5, ExceptionBuilder.buildReasonString(-46578067, null))); } else { this.dispatcher.enqueue(null); }  this.active = false; if (debug.debugIt(64)) debug.debug(-142394261359015L, "connectionDropped");  } protected boolean isActive() { if (debug.debugIt(32)) debug.debug(-165922073994779L, "isActive");  if (debug.debugIt(64)) debug.debug(-142394261359015L, "isActive", Boolean.valueOf(this.active));  return this.active; } protected byte[] receive() throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "receive");  byte[] data = this.rdr.get(); if (data == null) throw new EOFException(ExceptionBuilder.buildReasonString(-359372290, null));  this.rdr.prepGet(null); this.lastMRTime = this.pingClock; this.pingCnt = 0; if (debug.debugIt(64)) debug.debug(-142394261359015L, "receive", data);  return data; } protected void handleMessage(byte[] data) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "handleMessage", data);  MessageEncrypter mp = this.security.incoming(data); MessageHandle msg = SchemaRegistry.getMessageHandle(data, mp); if (this.baseConfig.ENABLE_QOP_SECURITY && this.security.getQop(msg) > Framing.qop(data)) { Byte onMsg = Byte.valueOf(Framing.qop(data)); Byte req = Byte.valueOf(this.security.getQop(msg)); Integer type = Integer.valueOf(msg.getChoice(149)); throw new IOException(ExceptionBuilder.buildReasonString(1481488182, new Object[] { onMsg, req, type })); }  if (msg != null) { switch (msg.getChoice(149)) { case 1: handleNormal(msg); break;case 5: handleConnGrant(msg); break;case 8: this.security.qopUpdate(msg); break;case 2: send(this.pingReply); break;case 4: handleError(msg); break;case 6: throw new IOException(ExceptionBuilder.buildReasonString(1024325086, null));case 10: handleControl(msg); break;case 3: break;case 7: handleFeatureExchange(msg); break;default: send(this.notUnderstood); break; }  byte priority = msg.getByte(2); if (priority != 40) synchronized (this) { this.rwfm++; }   }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "handleMessage");  } private void handleError(MessageHandle msg) throws IOException { int errorCode = msg.getInt(34); switch (errorCode) { case -31: throw new IOException(ExceptionBuilder.buildReasonString(-300049318, null)); }  throw new IOException(ExceptionBuilder.buildReasonString(1024325086, null)); } protected void handleConnGrant(MessageHandle msg) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "handleConnGrant", msg);  int server = msg.getInt(35); int connection = msg.getInt(36); this.messageId = msg.getInt(37) << 32L; this.tempTopicPrefix = "\001TEMP/" + server + "/" + connection; if (msg.isPresent(38)) { this.clientId = msg.getString(38); } else if (debug.debugIt(16)) { debug.debug(-153415734321212L, "congrant", " no clientid supplied "); }  if (msg.isPresent(39)) { this.publisherId = msg.getString(39); } else if (debug.debugIt(16)) { debug.debug(-153415734321212L, "congrant", " no publisherid supplied "); }  if (debug.debugIt(16)) debug.debug(-153415734321212L, "congrant", " clientid=" + this.clientId + " publisherId=" + this.publisherId);  if (debug.debugIt(64)) debug.debug(-142394261359015L, "handleConnGrant");  } protected void handleNormal(MessageHandle msg) throws IOException { int id; if (debug.debugIt(32)) debug.debug(-165922073994779L, "handleNormal", msg);  switch (msg.getChoice(152)) { case 3: id = msg.getInt(16); postTrack((MessageBodyHandle)msg, id); break;case 4: case 5: newJMSMessage(msg); break;case 1: postTrack((MessageBodyHandle)msg, 1); break;default: throw new IOException(ExceptionBuilder.buildReasonString(1024325086, null)); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "handleNormal");  } protected void deliverUntargeted(SubscriptionInfo subInfo, MessageHandle msg) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "deliverUntargeted", subInfo.topic, msg);  MessageImpl m = constructMessageImpl(msg); Assert.condition((subInfo != null)); if (debug.debugIt(16)) debug.debug(-153415734321212L, "deliverUntargeted:subInfo!=null");  boolean deliver = true; if (msg.isPresent(10)) { boolean persistent = msg.getBoolean(10); if (persistent) { long pubendId = msg.getLong(5); if (!subInfo.getCatchup(pubendId)) deliver = false;  }  }  if (deliver) { if (debug.debugIt(16)) debug.debug(-153415734321212L, "deliverUntargeted: in if (deliver)");  m.subInfo = subInfo; m.targetted = false; if (debug.debugIt(16)) debug.debug(-153415734321212L, "deliverUntargeted: before newMessageForClient");  newMessageForClient(subInfo, m); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "deliverUntargeted");  } public void advanceRecvWindow(int limit) throws IOException { if (!this.baseConfig.ENABLE_CLIENT_FLOW_CONTROL) {
/*      */       return;
/*      */     }
/*      */     
/* 2981 */     Assert.condition((limit >= 0));
/*      */ 
/*      */ 
/*      */     
/* 2985 */     synchronized (this)
/* 2986 */     { if (this.rwfm + limit < this.rwr) {
/* 2987 */         Assert.failure("regression on receive window from " + this.rwr + " to " + (this.rwfm + limit));
/*      */       }
/* 2989 */       if (this.rwfm + limit == this.rwr) {
/*      */         return;
/*      */       }
/* 2992 */       long newlyAvail = this.rwfm + limit - this.rwr;
/*      */       
/* 2994 */       if (this.maxWindowSize > 0 && newlyAvail * 2L >= this.maxWindowSize)
/*      */       
/* 2996 */       { MessageHandle fwAd = newControlMessage(31, 0);
/* 2997 */         fwAd.setLong(99, this.rwr + 1L);
/* 2998 */         fwAd.setLong(100, newlyAvail);
/*      */ 
/*      */         
/* 3001 */         send(fwAd);
/*      */ 
/*      */         
/* 3004 */         this.rwr += newlyAvail; }  }  }
/*      */   protected void newJMSMessage(MessageHandle msg) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "newJMSMessage", msg);  long pubendId = 0L; long timestamp = 0L; boolean persistent = false; if (msg.isPresent(10)) { persistent = msg.getBoolean(10); if (persistent) { pubendId = msg.getLong(5); timestamp = msg.getLong(6); }  }  if (this.have_matchspace) { if (msg.isPresent(32)) { int id = msg.getInt(32); Integer subid = Integer.valueOf(id); SubscriptionInfo subInfo = (SubscriptionInfo)this.allSubs.get(subid); if (subInfo == null) return;  if (this.match.doesThisMatch(this, subInfo, msg)) { if (subInfo.getCatchup(pubendId)) throw new IOException(ExceptionBuilder.buildReasonString(-2055181549, new Object[] { subInfo.reconnId, Long.valueOf(pubendId) }));  MessageImpl m = constructMessageImpl(msg); m.subInfo = subInfo; m.targetted = true; newMessageForClient(subInfo, m); }  } else { this.match.matchAndDeliver(this, persistent, pubendId, timestamp, msg); }  } else { MessageImpl m = constructMessageImpl(msg); m.subInfo = null; m.targetted = false; newMessageForClient(null, m); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "newJMSMessage");  }
/*      */   private void initTminFromSubReply(SubscriptionInfo subInfo, MessageDataHandle msg) throws IOException { if (!msg.isPresent(56)) { if (debug.debugIt(2)) debug.debug(2L, "extractTmins", " no data present, return with nothing");  throw new IOException(ExceptionBuilder.buildReasonString(-534058329, new Object[] { subInfo.reconnId })); }  MessageBodyHandle[] tmins = msg.getTable(56); for (int i = 0; i < tmins.length; i++) { long pubendId = tmins[i].getLong(0); long tmin = tmins[i].getLong(1); subInfo.Tmin.set(Long.valueOf(pubendId), tmin); }  if (subInfo.subMode == 4) subInfo.reconnId = msg.getString(55);  }
/*      */   private void initTminFromReactivateReply(SubscriptionInfo subInfo, MessageDataHandle msg) { MessageBodyHandle[] tmins = msg.getTable(81); for (int i = 0; i < tmins.length; i++) { long pubendId = tmins[i].getLong(0); long tmin = tmins[i].getLong(1); subInfo.Tmin.set(Long.valueOf(pubendId), tmin); }  subInfo.reconnId = msg.getString(79); }
/*      */   protected synchronized void completeSubscribe(int id, int track, MessageDataHandle msg, boolean reactivate) throws IOException { if (id < 0) return;  SubscriptionInfo subInfo = (SubscriptionInfo)this.responseHolders[track]; subInfo.subid = id; if (subInfo.subMode != 1) if (reactivate) { initTminFromReactivateReply(subInfo, msg); } else { initTminFromSubReply(subInfo, msg); }   if (debug.debugIt(16)) debug.debug(-153415734321212L, "completeSubscribe: id=" + id + ",,reconnId=" + subInfo.reconnId);  if (subInfo.subMode == 4) { if (!reactivate) { MessageBodyHandle[] ctinit = msg.getTable(57); for (int i = 0; i < ctinit.length; i++) { long pubendId = ctinit[i].getLong(0); long timestamp = ctinit[i].getLong(1); subInfo.Delivered.set(Long.valueOf(pubendId), timestamp); }  }  subInfo.initializeCatchup(); this.allDurableSubs.put(subInfo.reconnId, subInfo); }  Integer subint = Integer.valueOf(subInfo.subid); this.allSubs.put(subint, subInfo); subInfo.active = true; }
/*      */   private void extractQueryResults(MessageDataHandle msg, int track) { String[] list = new String[0]; if (debug.debugIt(32)) debug.debug(-165922073994779L, "extractQueryResults");  int count = 0; MessageBodyHandle[] qtab = msg.getTable(81); for (int i = 0; i < qtab.length; i++) { String topic = qtab[i].getString(0); String query = qtab[i].getString(1); String reconnId = qtab[i].getString(2); list[count] = topic + " " + query + " " + reconnId; count++; }  this.responseHolders[track] = list; if (debug.debugIt(64)) debug.debug(-142394261359015L, "extractQueryResults");  }
/* 3010 */   protected void signalCatchupComplete(MessageHandle payload, int id) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "signalCatchupComplete", Integer.valueOf(id));  SubscriptionInfo subInfo = null; Integer subid = Integer.valueOf(id); subInfo = (SubscriptionInfo)this.allSubs.get(subid); if (subInfo == null) { if (debug.debugIt(2)) debug.debug(2L, "signalCatchupComplete", "attempted catchup on UNKNOWN subscriber subid=" + id);  return; }  MessageBodyHandle[] catchTab = payload.getTable(90); for (int i = 0; i < catchTab.length; i++) { long pubendId = catchTab[i].getLong(0); subInfo.changeCatchup(Long.valueOf(pubendId), true); if (debug.debugIt(16)) debug.debug(16L, "signalCatchupComplete", "catchup state now complete for pub=" + pubendId);  }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "signalCatchupComplete");  } protected void signalGap(MessageHandle msg, int id) throws IOException { if (debug.debugIt(2)) debug.debug(2L, "signalGap", Integer.valueOf(id));  SubscriptionInfo subInfo = null; Integer subid = Integer.valueOf(id); subInfo = (SubscriptionInfo)this.allSubs.get(subid); if (subInfo == null) return;  long pub = msg.getLong(92); long T = msg.getLong(94); if (subInfo.getCatchup(pub)) throw new IOException(ExceptionBuilder.buildReasonString(1329450079, new Object[] { subInfo.reconnId, Long.valueOf(pub) }));  MessageImpl m = constructDummyMessageImpl(); m.subInfo = subInfo; m.targetted = true; m.gapMsg = true; m.gsPub = pub; m.gsTic = T; newMessageForClient(subInfo, m); if (debug.debugIt(2)) debug.debug(2L, "signalGap");  } public void newMessageForClient(SubscriptionInfo subInfo, MessageImpl msg) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "newMessageForClient1", subInfo, msg);  msg.subInfo = subInfo; this.dispatcher.enqueue(msg); if (debug.debugIt(64)) debug.debug(-142394261359015L, "newMessageForClient");  } public MessageImpl constructMessageImpl(MessageHandle msg) { return new MessageImpl(msg, this); } public MessageImpl constructDummyMessageImpl() { return new MessageImpl(); } protected void signalSilence(MessageHandle payload, int id) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "signalSilence", Integer.valueOf(id));  SubscriptionInfo subInfo = null; long pub = payload.getLong(96); if (id < 0) { Enumeration<SubscriptionInfo> e = this.allDurableSubs.elements(); while (e.hasMoreElements()) { subInfo = e.nextElement(); if (subInfo.getCatchup(pub)) { long t = payload.getLong(98); signalSilence(subInfo, pub, t, false); }  }  } else { Integer subid = Integer.valueOf(id); subInfo = (SubscriptionInfo)this.allSubs.get(subid); if (subInfo == null) return;  if (subInfo.getCatchup(pub)) throw new IOException(ExceptionBuilder.buildReasonString(-1572478949, new Object[] { subInfo.reconnId, subInfo.appName, Long.valueOf(payload.getLong(98)), Long.valueOf(pub) }));  long t = payload.getLong(98); signalSilence(subInfo, pub, t, true); }  } protected void signalSilence(SubscriptionInfo subInfo, long pub, long t, boolean targetted) { MessageImpl m = constructDummyMessageImpl(); m.subInfo = subInfo; m.targetted = targetted; m.silenceMsg = true; m.gsPub = pub; m.gsTic = t; newMessageForClient(subInfo, m); if (debug.debugIt(64)) debug.debug(-142394261359015L, "signalSilence");  } protected void handleControl(MessageHandle msg) throws IOException { int status, track; if (debug.debugIt(32)) debug.debug(-165922073994779L, "handleControl", msg);  String reconnId = null; int id = -1; switch (msg.getChoice(162)) { case 2: id = msg.getInt(54); track = msg.getInt(47); if (debug.debugIt(16)) debug.debug(-153415734321212L, "subscribeReply", "just in, for id=" + id + " and track=" + track);  completeSubscribe(id, track, (MessageDataHandle)msg, false); postTrack((MessageBodyHandle)msg, id); break;case 23: id = msg.getInt(80); track = msg.getInt(47); if (debug.debugIt(16)) debug.debug(-153415734321212L, "reactivateReply", "just in, for id=" + id + " and track=" + track);  completeSubscribe(id, track, (MessageDataHandle)msg, true); postTrack((MessageBodyHandle)msg, id); break;case 4: track = msg.getInt(47); if (msg.isPresent(63)) { status = msg.getInt(63); } else { status = 1; }  if (debug.debugIt(16)) debug.debug(-153415734321212L, "unsubscribeReply", "just in, status=" + status + " and track=" + track);  postTrack((MessageBodyHandle)msg, status); break;case 27: status = msg.getInt(88); track = msg.getInt(47); if (debug.debugIt(16)) debug.debug(-153415734321212L, "releaseReply", "just in, status=" + status + " and track=" + track);  postTrack((MessageBodyHandle)msg, status); break;case 6: case 8: case 10: track = msg.getInt(47); if (debug.debugIt(16)) debug.debug(-153415734321212L, "start/stopDel/disc reply", "just in, track=" + track);  postTrack((MessageBodyHandle)msg, 1); break;case 13: status = msg.getInt(64); track = msg.getInt(47); if (debug.debugIt(16)) debug.debug(-153415734321212L, "publishReply", "just in, status=" + status + " and track=" + track);  postTrack((MessageBodyHandle)msg, status); break;case 15: track = msg.getInt(47); if (debug.debugIt(16)) debug.debug(-153415734321212L, "topicQueryReply", "just in, track=" + track);  registerTopicProperties(msg); postTrack((MessageBodyHandle)msg, 1); break;case 17: track = msg.getInt(47); status = msg.getInt(70); if (debug.debugIt(16)) debug.debug(-153415734321212L, "setClientIdReply", "just in, status=" + status + " and track=" + track);  postTrack((MessageBodyHandle)msg, status); break;case 21: track = msg.getInt(47); status = msg.getInt(74); if (debug.debugIt(16)) debug.debug(-153415734321212L, "deactivateReply", "just in, status=" + status + " and track=" + track);  postTrack((MessageBodyHandle)msg, status); break;case 19: track = msg.getInt(47); status = msg.getInt(72); if (debug.debugIt(16)) debug.debug(-153415734321212L, "setPublisherIdReply", "just in, status=" + status + " and track=" + track);  postTrack((MessageBodyHandle)msg, status); break;case 28: id = msg.getInt(89); signalCatchupComplete(msg, id); break;case 29: id = msg.getInt(91); if (debug.debugIt(16)) debug.debug(-153415734321212L, "gap control", "just in, id=" + id);  signalGap(msg, id); break;case 30: id = -1; if (msg.isPresent(95)) id = msg.getInt(95);  if (debug.debugIt(16)) debug.debug(-153415734321212L, "silence control", "just in, id=" + id);  signalSilence(msg, id); break;case 25: track = msg.getInt(47); if (debug.debugIt(16)) debug.debug(-153415734321212L, "querySubscriptionseply", "just in, track=" + track);  extractQueryResults((MessageDataHandle)msg, track); postTrack((MessageBodyHandle)msg, 0); break;default: throw new IOException(ExceptionBuilder.buildReasonString(1024325086, null)); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "handleControl");  } private synchronized void registerTopicProperties(MessageHandle msg) throws IOException { MessageBodyHandle[] props = msg.getTable(68); String[][] ans = { new String[props.length], new String[props.length] }; for (int i = 0; i < props.length; i++) { ans[0][i] = props[i].getString(0); ans[1][i] = props[i].getString(1); }  String topicKey = msg.getString(67); TopicImpl toRegister = (TopicImpl)this.topicCache.get(topicKey); toRegister.setProperties(ans); } protected void handleFeatureExchange(MessageHandle msg) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "handleFeatureExchange", msg);  if (!msg.getBoolean(42)) { MessageBodyHandle[] featureTable = msg.getTable(43); synchronized (this.features) { for (int i = 0; i < featureTable.length; i++) { String featureName = featureTable[i].getString(0); String paramName = featureTable[i].getString(1); String paramValue = featureTable[i].getString(2); this.features.put(featureName, paramName, paramValue); }  featureExchangeComplete(); }  } else { MessageHandle ans = newMessage(7, "", 4); ans.setBoolean(42, false); ans.setTable(43, null); send(ans); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "handleFeatureExchange");  } private synchronized void postTrack(MessageBodyHandle payload, int val) { if (debug.debugIt(32)) debug.debug(-165922073994779L, "postTrack", payload, Integer.valueOf(val));  int track = payload.getInt(47); this.outReqs[track] = val; notifyAll(); if (debug.debugIt(64)) debug.debug(-142394261359015L, "postTrack");  } public void send(Message msg) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "sendMessage", msg);  MessageImpl m = (MessageImpl)msg; m.prepareToSend(this); m.setPersistent(false); if (!m.getPersistent()) { send(m.cursor); } else { if (this.pre1_2) throw new IOException(ExceptionBuilder.buildReasonString(-535566704, new Object[] { m.getTopic() }));  int track = getTrackingNumber(); m.cursor.setInt(13, track); send(m.cursor); int reply = waitFor(track); if (reply == 101) throw new IOException(ExceptionBuilder.buildReasonString(877951616, null));  if (reply == 102) throw new IOException(ExceptionBuilder.buildReasonString(-535566704, new Object[] { m.getTopic() }));  if (reply != 100) throw new IOException(ExceptionBuilder.buildReasonString(-175032159, null));  }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "sendMessage");  } public synchronized void send(MessageHandle msg) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "send", msg);  if (msg == null) throw new IllegalArgumentException(ExceptionBuilder.buildReasonString(-1124040193, null));  checkException(); msg = SchemaRegistry.reEncode(this.interpId, msg); if (msg.getChoice(149) == 1) msg.setLong(11, ++this.messageId);  try { byte qop = this.security.getQop(msg); ByteSequence props = getPropagationMessages(msg.getSchemata()); while (props != null) { this.outStream.write(props.frame, props.offset, props.framelen); props = props.next; }  byte[] toSend = this.security.outgoing(msg, qop); this.outStream.write(toSend, 0, Framing.fullLength(toSend)); this.outStream.flush(); } catch (Exception e) { setException(e); }  checkException(); if (debug.debugIt(64)) debug.debug(-142394261359015L, "send");  } public String hostandportString() { if (debug.debugIt(32)) debug.debug(-165922073994779L, "hostandportString");  if (this.happy == null) this.happy = this.socket.getInetAddress().toString() + ':' + this.socket.getPort() + ':' + this.socket.getLocalPort();  if (debug.debugIt(64)) debug.debug(-142394261359015L, "hostandportString", this.happy);  return this.happy; } private final ByteSequence getPropagationMessages(Schema[] schemata) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "getPropagationMessages", schemata);  ByteSequence msgs = SchemaRegistry.getPropagationMessages(schemata, this); ByteSequence ans = null; while (msgs != null) { byte[] b = this.security.framePropagationMessage(msgs.frame); if (ans == null) { ans = new ByteSequence(b, 0, b.length); } else { ans.append(new ByteSequence(b, 0, b.length)); }  msgs = msgs.next; }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "getPropagationMessages", ans);  return ans; } public String getClientId() { return this.clientId; } public void setClientId(String id) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "setClientId", id);  if (this.pre1_2 || (!this.durable_connection && !this.have_matchspace)) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  int track = getTrackingNumber(); MessageHandle sIdmsg = newControlMessage(16, track); sIdmsg.setString(69, id); send(sIdmsg); int ok = waitFor(track); if (ok == 0) { this.clientId = id; } else { switch (ok) { case -22: throw new MinimalIOException(-22, ExceptionBuilder.buildReasonString(-292024369, null));case -24: throw new MinimalIOException(-24, ExceptionBuilder.buildReasonString(569731919, null));case -23: throw new MinimalIOException(-23, ExceptionBuilder.buildReasonString(-2131585332, new Object[] { "client", id })); }  throw new MinimalIOException(-28, ExceptionBuilder.buildReasonString(1024325086, null)); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "setClientId");  } public String getPublisherId() { return this.publisherId; } public void setPublisherId(String id) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "setPublisherId", id);  if (this.pre1_2 || !this.durable_connection) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  int track = getTrackingNumber(); MessageHandle sIdmsg = newControlMessage(18, track); sIdmsg.setString(71, id); send(sIdmsg); int ok = waitFor(track); if (ok == 0) { this.publisherId = id; } else { switch (ok) { case -22: throw new MinimalIOException(-22, ExceptionBuilder.buildReasonString(-292024369, null));case -24: throw new MinimalIOException(-24, ExceptionBuilder.buildReasonString(569731919, null));case -23: if (debug.debugIt(2)) debug.debug(-175584356845707L, "Attempting to set a duplicate publisher id");  throw new MinimalIOException(-23, ExceptionBuilder.buildReasonString(-2131585332, new Object[] { "publisher", id })); }  throw new MinimalIOException(-28, ExceptionBuilder.buildReasonString(1024325086, null)); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "setPublisherId");  } public String newSubscription(Topic topic, String selector) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "newSubscription-1", "pre-id");  if (this.pre1_2 || !this.durable_connection) throw new IOException(ExceptionBuilder.buildReasonString(-661252090, null));  SubscriptionInfo subInfo = new SubscriptionInfo(); subInfo.topic = topic.toString(); subInfo.rawtopic = topic; subInfo.selector = selector; subInfo.subMode = 4; subInfo.reconnId = null; subInfo.isJMSdurable = false; int subid = subscribeInternal(subInfo, false); return subInfo.reconnId; } public String newSubscription(Topic topic, String selector, Checkpoint startpoint) throws IOException { throw new IOException(ExceptionBuilder.buildReasonString(-1699776069, new Object[] { "Explicit Start Point" })); } public String newSubscription(Topic topic, String selector, long millitime) throws IOException { throw new IOException(ExceptionBuilder.buildReasonString(-1699776069, new Object[] { "Explicit Start Point" })); } public void reactivate(String reconnId, Checkpoint cp) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "reactivate", reconnId);  if (this.pre1_2 || !this.durable_connection) throw new IOException(ExceptionBuilder.buildReasonString(-661252090, null));  SubscriptionInfo subInfo = new SubscriptionInfo(); CheckpointImpl cpoint = (CheckpointImpl)cp; subInfo.topic = cpoint.topic; subInfo.selector = cpoint.selector; subInfo.Delivered = cpoint.vc.clonep(); subInfo.subMode = 4; subInfo.reconnId = reconnId; subInfo.rawtopic = createTopic(subInfo.topic); subscribeInternal(subInfo, true); } protected void removeSubscription(SubscriptionInfo subInfo) throws IOException { if (subInfo.subMode == 4) this.allDurableSubs.remove(subInfo.reconnId);  this.allSubs.remove(Integer.valueOf(subInfo.subid)); if (this.have_matchspace) this.match.removeSubscription(subInfo);  synchronized (subInfo) { subInfo.active = false; }  if (!subInfo.isJMSdurable && this.dispatcher != null) this.dispatcher.purgeQ(subInfo);  } public void deactivate(String reconnId) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "deactivate", reconnId);  if (this.pre1_2 || (!this.durable_connection && !this.have_matchspace)) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  int track = getTrackingNumber(); MessageHandle deAmsg = newControlMessage(20, track); deAmsg.setString(73, reconnId); send(deAmsg); int id = waitFor(track); if (id == -1) throw new MinimalIOException(-20, ExceptionBuilder.buildReasonString(-468882815, null));  SubscriptionInfo subInfo = (SubscriptionInfo)this.allDurableSubs.get(reconnId); if (subInfo != null) removeSubscription(subInfo);  if (debug.debugIt(64)) debug.debug(-142394261359015L, "deactivate");  } public void unsubscribe(String reconnId) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "unsubscribe", reconnId);  unsubscribe(reconnId, reconnId, 0); if (debug.debugIt(64)) debug.debug(-142394261359015L, "unsubscribe");  } public void unsubscribe(String name, String reconnId, int the_mode) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "unsubscribe-DMS", name + " " + the_mode);  if (this.pre1_2 || (!this.durable_connection && !this.have_matchspace)) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  int track = getTrackingNumber(); MessageHandle submsg = newControlMessage(3, track); submsg.setInt(60, -1); submsg.setInt(61, the_mode); submsg.setString(62, name); send(submsg); int status = waitFor(track); if (status == -1) throw new MinimalIOException(-20, ExceptionBuilder.buildReasonString(-468882815, null));  if (reconnId != null) { SubscriptionInfo subInfo = (SubscriptionInfo)this.allDurableSubs.get(reconnId); if (subInfo != null) removeSubscription(subInfo);  if (debug.debugIt(64)) debug.debug(-142394261359015L, "unsubscribe-DMS");  }  } public String[] querySubscriptions(Topic topic, String selector) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "querySubscriptions", topic, selector);  if (this.pre1_2 || (!this.durable_connection && !this.have_matchspace)) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  int track = getTrackingNumber(); MessageHandle qmsg = newControlMessage(24, track); qmsg.setString(82, topic.toString()); qmsg.setString(83, selector); send(qmsg); int id = waitFor(track); String[] theList = (String[])this.responseHolders[track]; this.responseHolders[track] = null; return theList; } public void release(String reconnId, Checkpoint cp) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "release", reconnId);  CheckpointImpl cpoint = (CheckpointImpl)cp; release(reconnId, cpoint.vc, false); if (debug.debugIt(64)) debug.debug(-142394261359015L, "release");  } public void release(String reconnId, VectorClock vc, boolean wait_for_reply) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "release-I", reconnId, vc.toString());  if (this.pre1_2 || (!this.durable_connection && !this.have_matchspace)) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  int track = -1; if (wait_for_reply) track = getTrackingNumber();  MessageHandle relmsg = newControlMessage(26, track); relmsg.setString(85, reconnId); relmsg.setBoolean(86, wait_for_reply); MessageBodyHandle[] rtimeTab = new MessageBodyHandle[vc.size()]; Enumeration<StampPair> cStamps = vc.allElements(); int i = 0; while (cStamps.hasMoreElements()) { StampPair sp = cStamps.nextElement(); rtimeTab[i] = relmsg.newTableRow(87); rtimeTab[i].setLong(0, sp.pid); rtimeTab[i].setLong(1, sp.stamp); i++; }  relmsg.setTable(87, rtimeTab); send(relmsg); if (wait_for_reply) { int status = waitFor(track); if (status == -1) throw new IOException(ExceptionBuilder.buildReasonString(1616081624, null));  }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "release-I");  } public Checkpoint checkpoint(Event event, String reconnId) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "checkpoint-full", reconnId);  if (this.pre1_2 || (!this.durable_connection && !this.have_matchspace)) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  SubscriptionInfo subInfo = (SubscriptionInfo)this.allDurableSubs.get(reconnId); if (subInfo == null) throw new IOException(ExceptionBuilder.buildReasonString(-468882815, null));  CheckpointImpl cp = null; synchronized (subInfo) { if (event != null) { MessageImpl m = (MessageImpl)event; if (m != subInfo.latest) throw new IOException(ExceptionBuilder.buildReasonString(317394304, null));  }  cp = new CheckpointImpl(subInfo.topic, subInfo.selector, subInfo.Delivered.clonep()); }  if (debug.debugIt(64)) debug.debug(-142394261359015L, "checkpoint-full");  return cp; } public Checkpoint.Increment checkpoint(Event event, String reconnId, Checkpoint oldcp) throws IOException { if (debug.debugIt(32)) debug.debug(-165922073994779L, "checkpoint-incr", reconnId);  if (this.pre1_2 || (!this.durable_connection && !this.have_matchspace)) throw new MinimalIOException(-27, ExceptionBuilder.buildReasonString(-661252090, null));  SubscriptionInfo subInfo = (SubscriptionInfo)this.allDurableSubs.get(reconnId); if (subInfo == null) throw new IOException(ExceptionBuilder.buildReasonString(-468882815, null));  CheckpointImpl cpoint = (CheckpointImpl)oldcp; VectorClock incVC = null; synchronized (subInfo) { if (event != null) { MessageImpl m = (MessageImpl)event; if (m != subInfo.latest) throw new IOException(ExceptionBuilder.buildReasonString(317394304, null));  }  incVC = subInfo.Delivered.getIncrementFromOld(cpoint.vc); }  CheckpointImpl.IncrementImpl increment = new CheckpointImpl.IncrementImpl(incVC); if (debug.debugIt(64)) debug.debug(-142394261359015L, "checkpoint-incr");  return increment; } public boolean isInitiallyGapless(String reconnId) throws IOException { return true; } public synchronized void setMaxWindowSize(int v) { this.maxWindowSize = v; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void initialize(Class cls) {
/* 3021 */     synchronized (ConnectorImpl.class) {
/* 3022 */       if (!initialized) {
/*      */         
/* 3024 */         if (!ExceptionBuilder.isTranslatorSet()) {
/*      */           
/*      */           try {
/* 3027 */             ClientTranslate defT = (ClientTranslate)Class.forName("com.ibm.disthub2.impl.client.DefaultClientTranslate").newInstance();
/* 3028 */             ExceptionBuilder.setTranslator(defT);
/*      */           }
/* 3030 */           catch (Exception exception) {}
/*      */         }
/* 3032 */         if (ClientServices.logRecorder == null) {
/*      */           
/*      */           try {
/* 3035 */             ClientServices.logRecorder = (LogRecorder)Class.forName("com.ibm.disthub2.impl.client.ClientLogRecorder").newInstance();
/*      */           }
/* 3037 */           catch (Exception exception) {}
/*      */         }
/*      */         
/* 3040 */         if (ClientServices.logRecorder != null) {
/* 3041 */           Logger.start();
/*      */           try {
/* 3043 */             ClientServices.logRecorder.locked();
/* 3044 */             ClientServices.logRecorder.start();
/* 3045 */             Logger.connect();
/*      */           }
/* 3047 */           catch (Exception e) {
/*      */             try {
/* 3049 */               ClientServices.logRecorder.stop();
/*      */             }
/* 3051 */             catch (Exception exception) {}
/* 3052 */             ClientServices.logRecorder = null;
/*      */           } 
/*      */         } 
/*      */         
/* 3056 */         BaseConfig.initialize(cls);
/*      */ 
/*      */         
/* 3059 */         DebugState.update();
/*      */         
/* 3061 */         initialized = true;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public FeatureSet getFeatureSet() {
/* 3070 */     return this.features;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void featureExchangeComplete() {
/* 3077 */     String methodName = "featureExchangeComplete";
/*      */     
/* 3079 */     if (debug.debugIt(32)) {
/* 3080 */       debug.debug(32L, "featureExchangeComplete");
/*      */     }
/*      */     
/* 3083 */     synchronized (this.features) {
/*      */ 
/*      */ 
/*      */       
/* 3087 */       this.features.notifyAll();
/*      */     } 
/*      */     
/* 3090 */     if (debug.debugIt(64)) {
/* 3091 */       debug.debug(64L, "featureExchangeComplete");
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void waitForFeatureExchange(String feature) throws IOException {
/* 3102 */     String methodName = "waitForFeatureExchange";
/*      */     
/* 3104 */     if (debug.debugIt(32)) {
/* 3105 */       debug.debug(32L, "waitForFeatureExchange");
/*      */     }
/*      */     
/* 3108 */     synchronized (this.features) {
/* 3109 */       while (this.features.get(feature) == null) {
/*      */         try {
/* 3111 */           this.features.wait();
/*      */         }
/* 3113 */         catch (InterruptedException interruptedException) {}
/*      */       } 
/*      */     } 
/*      */     
/* 3117 */     checkException();
/*      */     
/* 3119 */     if (debug.debugIt(64)) {
/* 3120 */       debug.debug(64L, "waitForFeatureExchange");
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean enableMulticast() {
/* 3130 */     return false;
/*      */   }
/*      */ }


/* Location:              D:\download\com.ibm.mq.allclient-9.3.2.0.jar!\com\ibm\disthub2\impl\client\ConnectorImpl.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */